var documenterSearchIndex = {"docs":
[{"location":"#OnlinePackage","page":"OnlinePackage","title":"OnlinePackage","text":"","category":"section"},{"location":"#Interface","page":"OnlinePackage","title":"Interface","text":"","category":"section"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"Modules = [OnlinePackage]","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"Modules = [OnlinePackage]","category":"page"},{"location":"#OnlinePackage.USER_FILE","page":"OnlinePackage","title":"OnlinePackage.USER_FILE","text":"where OnlinePackage will look for your user information\n\n\n\n\n\n","category":"constant"},{"location":"#OnlinePackage.delete-Tuple{OnlinePackage.User,Any}","page":"OnlinePackage","title":"OnlinePackage.delete","text":"delete(user::User, repo_name)\n\nDelete a repository.\n\n\n\n\n\n","category":"method"},{"location":"#OnlinePackage.get_user","page":"OnlinePackage","title":"OnlinePackage.get_user","text":"get_user(user_file = USER_FILE)\n\nCreate a user profile from a TOML file. By default, looks in USER_FILE.\n\nThe file must contain a username, token, and ssh_keygen_file. See the sample.toml file in this repository for an example. It should look something like the following:\n\nusername = YOUR_GITHUB_USERNAME\ntoken = YOUR_GITHUB_TOKEN\nssh_keygen_file = PATH_TO_SSH_KEYGEN\n\nUse your github username.\n\nGet a token here. Make sure to check the public_repo scope, and optionally, the delete_repo scope.\n\nIf ssh-keygen is in your path, just set ssh_keygen_file to \"ssh-keygen\". If not, it often comes prepacked with git; check PATH_TO_GIT/usr/bin/ssh-keygen\".\n\n\n\n\n\n","category":"function"},{"location":"#OnlinePackage.put_online-Tuple{OnlinePackage.User,Any}","page":"OnlinePackage","title":"OnlinePackage.put_online","text":"put_online(user::User, repo_name; key_names = (\"COMPATHELPER_PRIV\",))\n\nPut a repository online: put it on github, and create SSH keys with names listed in key_names for use in various github actions. If the repository already exists, it will create a new set of keys.\n\njulia> using OnlinePackage\n\njulia> repo_name = \"Test1.4.2.jl\";\n\njulia> user = get_user(OnlinePackage.SAMPLE_FILE);\n\njulia> put_online(user, repo_name)\n\njulia> put_online(user, repo_name)\n\njulia> delete(user, repo_name)\n\n\n\n\n\n","category":"method"},{"location":"#Walk-through","page":"OnlinePackage","title":"Walk-through","text":"","category":"section"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"Currently, OnlinePackage is only set up to handle GitHub accounts, but other platforms might be supported in the future.","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"The first step to use OnlinePackage is to fill out your user information. USER_FILE will be the location that OnlinePackage will look, so create that file.","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"The contents of the file should look like this:","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"username = YOUR_GITHUB_USERNAME\ntoken = YOUR_GITHUB_TOKEN\nssh_keygen_file = PATH_TO_SSH_KEYGEN","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"See the documentation for get_user for information about how to create this information.","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"Then run","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"user = get_user()","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"to load the file. You can then put up a new package:","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"put_online(user, \"YOUR_NEW_PACKAGE.jl\")","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"OnlinePackage will automatically create SSH keys to enable various GitHub actions. The only key created by default is for CompatHelper: COMPATHELPER_PRIV. You can add as many additional keys as you like. For example, if you would also like a documenter key, you can run","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"put_online(user, \"YOUR_NEW_PACKAGE.jl\", key_names = (\"COMPATHELPER_PRIV\", \"DOCUMENTER_KEY\"))","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"Note that Documenter can use a generic GITHUB_TOKEN provided you enable github pages, so this is not strictly necessary.","category":"page"},{"location":"","page":"OnlinePackage","title":"OnlinePackage","text":"You can also use OnlinePackage to add keys to previously existing packages. The syntax is the same as above: OnlinePackage will automatically detect an existing package.","category":"page"}]
}
